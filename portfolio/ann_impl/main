import math

import network

#for dampening
def neg_logistic(c, x):
	return c - 1/(1 + math.e**(-x))

#initialize the network
net = network.network(input=[1, 3, 5], output=[1, 1, 1], hidden_count=2)

#the training iterator will accept data and return results via send
#calls until training_goal has been maintained over history_size
#iterations
it = net.training_iterator(training_goal=0.03, history_size=10)
it.send(None) #necessary to begin using the iterator

#trivial training set for the sake of demonstration
#each row consists of an input list, output list, and learning rate
training_data = [([1, 0.25, -0.5], [1, -1, 0], neg_logistic(2, n)) for n in range(100)]

try:
	for row in training_data:
		print it.send(row)
except StopIteration:
	print "training goal reached"

